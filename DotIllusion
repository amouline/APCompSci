import java.awt.*;
import java.awt.Font;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import acm.graphics.GLabel;
import acm.graphics.GObject;
import acm.graphics.GOval;
import acm.graphics.GScalable;
import acm.program.GraphicsProgram;

/**
 * Optical illusion from cognitive psychology.  The idea and original code by Caroline Viscovich. 
 * 
 */
@SuppressWarnings("serial")

public class DotIllusion extends GraphicsProgram 
{ 
	private static final int DEFAULT_WIDTH = 800;       					     // canvas width
	private static final int DEFAULT_HEIGHT = DEFAULT_WIDTH;  // canvas height
	public static final int DOT_NUMBER = 10;								// number of dots appearing on the screen
	GOval[] DotArray=  new GOval[DOT_NUMBER];
	public static final int PAUSE= 70;											// pause time between each 'disappearance' of a dot
	private static final double CIRCLE_PERCENT = .4; // fraction of hwat the circle presents as a fraction of the window's smallest size
	private static final double DOT_PERCENT = 0.07;
	// more class constants go here

	private double wid, ht;  // width and height of the canvas (needed for resizing)

	/** 
	 * Main method to run the dot illusion as an application.
	 * @param args  no args expected
	 */
	public static void main(String[] args) { 
		(new DotIllusion()).start(args); 
	}

	/**
	 * Initializes the canvas with an X in the center and a ring of surrounding dots.
	 */
	public void init() {
		setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT); 
		layoutX();
		layoutDots();
		catchResizeEvents();
	} 

	/**
	 * Lays out the 'X' in the center of the canvas. This method puts the x in the center of the screen no matter what the screen size is
	 */
	private void layoutX() {
		int CENTER_POINT_X = getWidth()/2;
		int CENTER_POINT_Y = getHeight()/2;
		GLabel X = new GLabel("X");
		X.setColor(Color.BLACK);
		X.setFont(new Font("arial", 300, 20));
		add(X, CENTER_POINT_X, CENTER_POINT_Y);
	}

	/**
	 * Lays out the dots (circles) in a ring starting at the top, centered on the canvas. This counts the number of desired dots, prints them, and 
	 */
	private void layoutDots() {	
		int windowX = getWidth();
		int windowY= getHeight();
		double CIRCLE_SIZE = Math.min(windowX, windowY)*CIRCLE_PERCENT;
		double DOT_SIZE = Math.min(windowX, windowY) * DOT_PERCENT;
		int centerX = windowX/2;
		int centerY = windowY/2;

		for(int i = 0; i<DOT_NUMBER; i++) {
			GOval dot = new GOval(centerX, centerY, DOT_SIZE, DOT_SIZE);

			dot.setFilled(true);
			dot.setColor(Color.MAGENTA);
			dot.movePolar(CIRCLE_SIZE, (360/DOT_NUMBER)*i);

			DotArray[i]= dot;
			add(dot);
		}
	}

	/**
	 * Sets up the handler for resize events.  This handler catches resize
	 * events, rescales the (GScalable) objects, and adjusts the locations
	 * of all GObjects. It does not adjust the font size for GLabels and such.
	 */
	private void catchResizeEvents() {
		wid = getWidth();
		ht = getHeight();
		addComponentListener(new ComponentAdapter() {
			public void componentResized(ComponentEvent e) {
				double scaleX = getWidth() / wid,  scaleY = getHeight() / ht;
				for (int i = 0; i < getElementCount(); i++) {
					Object obj = getElement(i);
					if (obj instanceof GObject) {
						if (obj instanceof GScalable) {
							((GScalable) obj).scale(scaleX, scaleY);
						}
						((GObject) obj).setLocation(((GObject) obj).getX()*scaleX, ((GObject) obj).getY()*scaleY);
					}
				}
				wid = getWidth(); ht = getHeight();
			}
		}
				); 		
	}

	/**
	 * Animation technique to make each dot in turn disappear briefly. This method uses a while loop to continuously make dots disappear, pause, and reappear
	 */
	public void run() { 
		// complete this method
		while(true) {
			for(int i = 0; i<DOT_NUMBER; i++) {
				DotArray[i].setFilled(false);
				DotArray[i].setColor(Color.white);
				pause(PAUSE); 
				DotArray[i].setFilled(true);
				DotArray[i].setColor(Color.magenta);
			}
		}	
	}
}
